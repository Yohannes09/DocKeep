services:
  dockeep-db:
    container_name: dockeep-db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - dockeep-db-data:/var/lib/postgresql/data
    networks:
      - app-network
      - dockeep-internal

  dockeep:
    image: yohannesmata/dockeep
    ports:
      - "${APP_PORT}:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}

      SPRING_DATASOURCE_URL: jdbc:postgresql://dockeep-db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 10
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1800000

      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      depends_on:
        dockeep-db:
          condition: service_healthy
      networks:
        - app-network
        - dockeep-internal

volumes:
  dockeep-db-data:

networks:
  app-network:
    external: true
  dockeep-internal:
    driver: bridge